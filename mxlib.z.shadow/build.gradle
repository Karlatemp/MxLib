/*
 * Copyright (c) 2018-2021 Karlatemp. All rights reserved.
 * @author Karlatemp <karlatemp@vip.qq.com> <https://github.com/Karlatemp>
 *
 * MXLib/MXLib.mxlib.z.shadow/build.gradle
 *
 * Use of this source code is governed by the MIT license that can be found via the following link.
 *
 * https://github.com/Karlatemp/MxLib/blob/master/LICENSE
 */


import io.github.karlatemp.publicationsign.impl.ArtifactSignTask

import java.nio.file.Files

plugins {
    id 'io.github.karlatemp.publication-sign' version '1.1.0'
    id("maven-publish")
}

def projects = new ArrayList<>(rootProject.subprojects)
projects.remove(project)
projects.remove(rootProject)
projects.removeIf { proj -> proj.name.contains("shadowjar") }
projects.removeIf { it.name == "mxlib.z.srx.debug" }

projects.forEach { proj ->
    proj.tasks.create("sourcesJar", Jar.class) { tsk ->
        tsk.dependsOn("classes")
        tsk.classifier = 'sources'
        tsk.from proj.sourceSets.main.allSource
    }
    proj.tasks.create("javadocJar", Jar.class) { tsk ->
        tsk.archiveClassifier.set('javadoc')
    }
}


task collectJars() {
    def tasks = new ArrayList<Jar>()
    projects.forEach { proj ->
        try {
            def task = proj.tasks.getByName("jar")
            if (task instanceof Jar) {
                tasks.add(task)
            }
        } catch (Throwable ignore) {
        }
        try {
            def task = proj.tasks.getByName("sourcesJar")
            if (task instanceof Jar) {
                tasks.add(task)
            }
        } catch (Throwable ignore) {
        }
        try {
            def task = proj.tasks.getByName("shadowJar")
            if (task instanceof Jar) {
                tasks.add(task)
            }
        } catch (Throwable ignore) {
        }
    }
    dependsOn(tasks)
    //noinspection GroovyAssignabilityCheck
    doLast {
        def target = new File(rootProject.buildDir, "clibs/" + rootProject.version)
        target.mkdirs()
        tasks.forEach { Jar jarTask ->
            def tfile = jarTask.archiveFile.get().asFile
            def ttf = new File(target, tfile.name)
            ttf.delete()
            Files.copy(tfile.toPath(), ttf.toPath())
        }
    }
}

def allPublishs = new ArrayList<String>()

publishing {
    repositories {
        maven {
            setName("MavenCentral")
            // Maven Central
            setUrl("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2")

            credentials {
                def prop = { name ->
                    if (rootProject.hasProperty(name)) {
                        return rootProject.property(name)
                    }
                    return ""
                }
                username = prop('sonatype.user')
                password = prop('sonatype.key')
            }

            metadataSources.ignoreGradleMetadataRedirection()
        }

        mavenLocal {
            metadataSources.ignoreGradleMetadataRedirection()
        }

    }

    publications { container ->
        projects.forEach { proj ->
            def ppid = "publish_${proj.name}".replace(".", "_")
            allPublishs.add(ppid)
            register(ppid, MavenPublication.class) { publication ->
                publication.artifactId(proj.name)
                //noinspection GroovyAssignabilityCheck
                publication.from(proj.components.java)

                def sources = proj.tasks.findByName('sourcesJar')
                def javadoc = proj.tasks.findByName('javadocJar')
                if (sources instanceof Jar) {
                    publication.artifact sources
                }
                if (javadoc instanceof Jar) {
                    publication.artifact javadoc
                }
                publication.setModuleDescriptorGenerator(null)

                publication.pom {
                    name = 'MxLib - ' + proj.name
                    description = 'MxLib - ' + proj.name
                    url = 'https://github.com/Karlatemp/MxLib'
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://spdx.org/licenses/MIT.html'
                        }
                    }
                    developers {
                        developer {
                            name = 'Karlatemp'
                            email = 'karlatemp@vip.qq.com'
                        }
                    }
                    scm {
                        url = 'https://github.com/Karlatemp/MxLib.git'
                        connection = 'https://github.com/Karlatemp/MxLib.git'
                    }
                }
            }

        }
    }
}

publicationSign {
    setupWorkflow { workflow ->
        workflow.fastSetup("keys/key.pub", "keys/key.pri")
    }
}

task signAllArtifacts() {
    tasks.matching { it instanceof ArtifactSignTask }.each {
        dependsOn(it)
    }
}
