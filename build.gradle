/*
 * Copyright (c) 2018-2021 Karlatemp. All rights reserved.
 * @author Karlatemp <karlatemp@vip.qq.com> <https://github.com/Karlatemp>
 *
 * MXLib/MXLib/build.gradle
 *
 * Use of this source code is governed by the MIT license that can be found via the following link.
 *
 * https://github.com/Karlatemp/MxLib/blob/master/LICENSE
 */

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.20' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.20' apply false
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply false

}

//noinspection GroovyAssignabilityCheck
allprojects {

    group 'io.github.karlatemp.mxlib'
    version '3.0-dev-19'

    repositories {
        mavenLocal()
        mavenCentral()
        //noinspection GroovyAssignabilityCheck
        maven { url = "https://libraries.minecraft.net" }
        //noinspection GroovyAssignabilityCheck
        maven { url = 'https://hub.spigotmc.org/nexus/content/groups/public/' }
    }

    //noinspection GroovyAssignabilityCheck
    afterEvaluate {
        if (project.name == 'mxlib.z.shadow') return
        dependencies {
            testImplementation 'org.junit.jupiter:junit-jupiter-api'
            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
            if (project.name.endsWith("-kotlin")
                    || project.name == 'mxlib.z.srx.debug'
            ) {
                def ktimp = { f ->
                    if (project.name == "mxlib.z.shadowjar-kotlin"
                            || project.name == 'mxlib.z.srx.debug'
                    ) {
                        compile f
                    } else {
                        compileOnly f
                        testCompile f
                    }
                }
                ktimp "org.jetbrains.kotlin:kotlin-stdlib"
                ktimp "org.jetbrains.kotlin:kotlin-serialization"
                // https://mvnrepository.com/artifact/org.jetbrains.kotlinx/kotlinx-serialization-json-jvm
                ktimp group: 'org.jetbrains.kotlinx', name: 'kotlinx-serialization-json-jvm', version: '1.0.1'

                ktimp "org.jetbrains.kotlin:kotlin-reflect"
                ktimp "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1"
                testCompile "org.jetbrains.kotlin:kotlin-test-junit5"
            }
        }

        test {
            useJUnitPlatform()
        }

        compileJava {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8

            if (project.name == 'mxlib.z.srx.debug') {
                sourceCompatibility = JavaVersion.VERSION_15
                targetCompatibility = JavaVersion.VERSION_15
            }
        }

        compileTestJava {
            sourceCompatibility = JavaVersion.VERSION_13
            targetCompatibility = JavaVersion.VERSION_13
        }

        try {
            kotlin {
                if (project.name != 'mxlib.z.srx.debug') {
                    explicitApi()
                }
            }
            def freeCompilerArgs0 = [
                    '-Xopt-in=kotlin.RequiresOptIn',
                    '-Xopt-in=kotlin.contracts.ExperimentalContracts',
                    '-Xjvm-default=enable',
            ]

            compileKotlin {
                kotlinOptions {
                    jvmTarget = '1.8'
                    freeCompilerArgs += freeCompilerArgs0
                }
            }
            compileTestKotlin {
                kotlinOptions {
                    jvmTarget = '1.8'
                    freeCompilerArgs += freeCompilerArgs0
                }
            }

        } catch (Throwable ignore) {
        }
    }
}

({
    def buildScan = extensions.findByName('buildScan')
    if (buildScan != null) {
        buildScan.termsOfServiceUrl = "https://gradle.com/terms-of-service"
        buildScan.termsOfServiceAgree = "yes"
    }
})();

({

    def versionOverrides = [
            '=====================================': '',
            'io.netty'                             : '4.1.59.Final',
            'org.jetbrains.kotlin'                 : '1.4.30',
            'org.jetbrains:annotations'            : '21.0.0',
            'org.junit.jupiter'                    : '5.7.2',
            'org.ow2.asm'                          : '9.1',
    ]
    allprojects {
        afterEvaluate {
            configurations.all { Configuration configuration ->
                def lst = configuration.dependencies.matching { Dependency dependency ->
                    if (dependency.version != null) return false
                    return true
                }.toList()
                lst.forEach { dep ->
                    def result1 = versionOverrides[dep.toString()]
                    if (result1 == null) {
                        result1 = versionOverrides[dep.group]
                    }
                    if (result1 != null) {
                        configuration.dependencies.remove(dep)
                        configuration.dependencies.add(
                                project.dependencies.create(
                                        group: dep.group,
                                        name: dep.name,
                                        version: result1,
                                )
                        )
                    }
                }
            }
        }
        configurations.all { Configuration configuration ->
            configuration.resolutionStrategy.eachDependency { dependency ->
                def result1 = versionOverrides[dependency.requested.module.toString()]
                if (result1 != null) {
                    dependency.useVersion(result1)
                    dependency.because("Custom override rule")
                } else {
                    def result2 = versionOverrides[dependency.requested.group]
                    if (result2 != null) {
                        dependency.useVersion(result2)
                        dependency.because("Custom override rule")
                    }
                }
            }
        }
    }
})();
